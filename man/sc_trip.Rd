% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/path.r
\name{sc_trip}
\alias{sc_trip}
\alias{sc_trip.data.frame}
\alias{sc_trip}
\alias{sc_trip}
\alias{sc_trip_}
\alias{sc_trip}
\alias{sc_trip_.data.frame}
\alias{sc_trip}
\alias{sc_trip_.tbl_sqlite}
\title{Build a PATH from a raw data table.}
\usage{
\method{sc_trip}{data.frame}(x, ..., .group = NULL)

sc_trip(x, ..., .group = NULL)

sc_trip_(x, path_cols = character(), .group = NULL)

\method{sc_trip_}{data.frame}(x, path_cols = character(), .group = NULL)

\method{sc_trip_}{tbl_sqlite}(x, path_cols = character(), .group = NULL)
}
\arguments{
\item{x}{input data}

\item{...}{columns that are nominated as vertex coordinates}

\item{.group}{group}

\item{path_cols}{path columns}
}
\value{
`sc::PATH`
}
\description{
Nominated columns will be used to find unique coordinates. All other columns belong on
the path-link-vertex data. Currently this is to find a single path from a table of data.
In future there will be methods for grouped data frames, and for other ways of declaring
groupings at the path and object level.

Create a trip the sc way
}
\examples{
data("Seatbelts", package= "datasets")
apath <- sc_trip(as.data.frame(Seatbelts), front, rear, kms)
sc::PRIMITIVE(apath)
sc_trip(aurora) ## we can have pure topology
aurora$id <- 1:nrow(aurora)
aurora$g <- aurora$id \%/\% 7
## or more usually, nominate the geometric space in which the path turns
## everything else is kept on a link table to the path entities
sc_trip(aurora, LONGITUDE_DEGEAST, LATITUDE_DEGNORTH, DATE_TIME_UTC)
sc::PRIMITIVE(sc_trip(aurora, LONGITUDE_DEGEAST, LATITUDE_DEGNORTH, DATE_TIME_UTC))
}
